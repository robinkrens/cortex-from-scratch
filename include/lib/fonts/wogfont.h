/* (CC-BY-NC-SA) ROBIN KRENS - ROBIN @ ROBINKRENS.NL
 * 
 * $LOG$
 * 2019/9/18 - ROBIN KRENS	
 * Initial version 
 * 
 * $DESCRIPTION$
 * A non-standard 5 by 7 bit font (ALL CHARs ARE UPPER CASE)
 * Some characters I haven't designed yet, these will display
 * a'â–ˆ' on a VGA or TFT screen. A character is column hex-coded. 
 *
 * An example to make things clear!
 * The letter 'S's bitmap is: 
 *
 * WIDTH = 5
 * ##### L
 * #___# E
 * #____ N
 * ##### G
 * ____# T
 * #___# H
 * ##### = 7
 *
 * # represents a selected bit, 1
 * _ represents a non selected bit, 0
 *  
 * For example, the first column is 1111101, the second columm 1001001
 * For hex encoding we start at the MSB, the first LSB is never used
 * The first column is 0xF6 and the second column 0x92. The letter 'S' 
 * equals to: 0xF6, 0x92, 0x92, 0x92, 0xDE, 
 *
 * */

const uint8_t ASCII5x7[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, // NULL
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0x00, 0x00, 0x00, 0x00, 0x00, // SPACE
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // ! 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0x28, 0x7C, 0x28, 0x7C, 0x28, // # definitely needed for terminal :D
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0x00, 0x02, 0x00, 0x00, 0x00, // .
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // /
	0xFE, 0x82, 0x92, 0x82, 0xFE, // 0
	0x00, 0x00, 0x82, 0xFE, 0x02, // 1
	0xDE, 0x92, 0x92, 0x92, 0xF2, // 2
	0xC6, 0x92, 0x92, 0x92, 0xFE, // 3
	0xF8, 0x08, 0x08, 0x08, 0xFE, // 4
	0xF6, 0x92, 0x92, 0x92, 0x9E, // 5
	0xFE, 0x92, 0x92, 0x92, 0xDE, // 6
	0xC0, 0x80, 0x80, 0x80, 0xFE, // 7
	0xFE, 0x92, 0x92, 0x92, 0xFE, // 8
	0xF6, 0x92, 0x92, 0x92, 0xFE, // 9
	0x00, 0x44, 0x00, 0x00, 0x00, //:
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0x7E, 0x88, 0x88, 0x88, 0x7E, // upper case A
	0xFE, 0x92, 0x92, 0x92, 0x7C, // B
	0xFE, 0x82, 0x82, 0x82, 0xC6, // C
	0xFE, 0x82, 0x82, 0x82, 0x7C, // D
	0xFE, 0x92, 0x92, 0x92, 0xC6, // E 
	0xFE, 0x90, 0x90, 0x90, 0xC0, // F 
	0xFE, 0x82, 0x9A, 0x92, 0xDE, // G
	0xFE, 0x10, 0x10, 0x10, 0xFE, // H
	0x00, 0x82, 0xFE, 0x82, 0x00, // I
	0x00, 0x06, 0x02, 0x82, 0xFE, // J
	0xFE, 0x10, 0x10, 0x28, 0xC6, // K
	0xFE, 0x02, 0x02, 0x02, 0x06, // L
	0xFE, 0x60, 0x18, 0x60, 0xFE, // M
	0xFE, 0x60, 0x30, 0x18, 0xFE, // N
	0x7C, 0x82, 0x82, 0x82, 0x7C, // O  
	0xFE, 0x90, 0x90, 0x90, 0x70, // P
	0x7C, 0x82, 0x8A, 0x84, 0x7A, // Q
	0xFE, 0x90, 0x90, 0x98, 0x6E, // R  
	0xF6, 0x92, 0x92, 0x92, 0xDE, // S
	0xC0, 0x80, 0xFE, 0x80, 0xC0, // T  
	0xFE, 0x02, 0x02, 0x02, 0xFE, // U
	0xF8, 0x0C, 0x02, 0x0C, 0xF8, // V 
	0xFE, 0x0C, 0x30, 0x0C, 0xFE, // W 
	0xC6, 0x6C, 0x10, 0x6C, 0xC6, // X
	0xE0, 0x30, 0x1E, 0x30, 0xE0, // Y
	0xC6, 0x8A, 0x92, 0xA2, 0xC6, // Z
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0x7E, 0x88, 0x88, 0x88, 0x7E, // lower case A
	0xFE, 0x92, 0x92, 0x92, 0x7C, // b
	0xFE, 0x82, 0x82, 0x82, 0xC6, // c
	0xFE, 0x82, 0x82, 0x82, 0x7C, // d
	0xFE, 0x92, 0x92, 0x92, 0xC6, // e 
	0xFE, 0x90, 0x90, 0x90, 0xC0, // f 
	0xFE, 0x82, 0x9A, 0x92, 0xDE, // g
	0xFE, 0x10, 0x10, 0x10, 0xFE, // h
	0x00, 0x82, 0xFE, 0x82, 0x00, // i
	0x00, 0x06, 0x02, 0x82, 0xFE, // j
	0xFE, 0x10, 0x10, 0x28, 0xC6, // k
	0xFE, 0x02, 0x02, 0x02, 0x06, // l
	0xFE, 0x60, 0x18, 0x60, 0xFE, // m
	0xFE, 0x60, 0x30, 0x18, 0xFE, // n
	0x7C, 0x82, 0x82, 0x82, 0x7C, // o  
	0xFE, 0x90, 0x90, 0x90, 0x70, // p
	0x7C, 0x82, 0x8A, 0x84, 0x7A, // q
	0xFE, 0x90, 0x90, 0x98, 0x6E, // r  
	0xF6, 0x92, 0x92, 0x92, 0xDE, // s
	0xC0, 0x80, 0xFE, 0x80, 0xC0, // t  
	0xFE, 0x02, 0x02, 0x02, 0xFE, // u
	0xF8, 0x0C, 0x02, 0x0C, 0xF8, // v 
	0xFE, 0x0C, 0x30, 0x0C, 0xFE, // w 
	0xC6, 0x6C, 0x10, 0x6C, 0xC6, // x
	0xE0, 0x30, 0x1E, 0x30, 0xE0, // y
	0xC6, 0x8A, 0x92, 0xA2, 0xC6, // z
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // DEL 
       	
};
